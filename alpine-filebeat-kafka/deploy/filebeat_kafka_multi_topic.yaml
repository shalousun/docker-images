# Used to collect logs from kubernates pods
#
# Example usage: kubectl create -f <this_file>

# ------------------- Filebeat Config ------------------------------------- #
apiVersion: v1
kind: ConfigMap
metadata:
  name: filebeat-config
  namespace: kube-system
  labels:
    k8s-app: filebeat
data:
  filebeat.yml: |-
    filebeat.registry_file: /var/log/filebeat.registry
    processors:
      - add_cloud_metadata:
    fields_under_root: true
    fields:
      program: filebeat_k8s
      hostname: ${FILEBEAT_HOST:${HOSTNAME}}
    filebeat.prospectors:
      - input_type: log
        paths:
          - /var/log/containers/*deployment*.log
        fields:
          log_topics: k8s-test
        symlinks: true
        tail_files: true
        json.message_key: log
        json.keys_under_root: true
        json.add_error_key: true
        max_lines: 1000
        negate: true
        multiline.negate: true
        multiline.pattern: '^\s*(\d{4}|\d{2})\-(\d{2}|[a-zA-Z]{3})\-(\d{2}|\d{4})'
        multiline.match: after
        processors:
          - add_kubernetes_metadata:
              in_cluster: true
              namespace: kube-system
        document_type: k8s_kafka
      - input_type: log
        paths:
          - /var/log/containers/nginx-ingress-controller*.log
        fields:
          log_topics: k8s_ingress_access
        symlinks: true
        tail_files: true
        json.message_key: log
        json.keys_under_root: true
        json.add_error_key: true
        max_lines: 1000
        negate: true
        multiline.negate: true
        multiline.pattern: '^{'
        multiline.match: after
        processors:
          - add_kubernetes_metadata:
              in_cluster: true
              namespace: kube-system
        document_type: k8s_ingress_access
    output.kafka:
      enabled: true
      required_acks: 1
      hosts: ${KAFKA_HOSTS}
      topic: '%{[fields][log_topics]}'
---
# ------------------- SpringBoot Application Service ---------------------- #
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: filebeat
  namespace: kube-system
  labels:
    app: filebeat
    k8s-app: filebeat
    kubernetes.io/cluster-service: "true"
spec:
  template:
    metadata:
      labels:
        k8s-app: filebeat
        kubernetes.io/cluster-service: "true"
    spec:
      serviceAccountName: filebeat
      containers:
      - name: filebeat
        image: registry.cn-hangzhou.aliyuncs.com/shalousun/filebeat-kafka:1.0
        imagePullPolicy: Always
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 200Mi
        env:
            - name:  KAFKA_HOSTS
              value: '["192.168.237.143:9092"]'
            - name:  KAFKA_TOPIC
              value: "k8s-test"
        volumeMounts:
        - name: filebeat-config
          mountPath: /filebeat/filebeat.yml
          readOnly: true
          subPath: filebeat.yml
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
      terminationGracePeriodSeconds: 30
      volumes:
      - name: filebeat-config
        configMap:
          defaultMode: 0600
          name: filebeat-config
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: filebeat
subjects:
- kind: ServiceAccount
  name: filebeat
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: filebeat
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: filebeat
  labels:
    k8s-app: filebeat
rules:
- apiGroups: [""] # "" indicates the core API group
  resources:
  - namespaces
  - pods
  verbs:
  - get
  - watch
  - list
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: filebeat
  namespace: kube-system
  labels:
    k8s-app: filebeat
